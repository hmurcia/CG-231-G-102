<!DOCTYPE html>
<html>
  <head>
    <title>Transformaciones con cubos</title>
    <style>
      html, body { margin: 0; padding: 0; overflow: hidden; }
      #text {
        position: absolute;
        padding: 10px;
        width: 100%;
        text-align: center;
        color: #FFFFFF;
      }
    </style>
  </head>
  <body>
    <div id="text">TRANSFORMACIONES CON CUBOS<br/>
      Traslación, escalado y rotación en X<br/>
      Ajustar los valores de lado y angulo para probar el modelo<br/>
      Se han incluido arreglos y funciones para facilitar el desarrollo</br>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r94/three.min.js"></script>
    <script>
      function init() {

        // Escena
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);    
        renderer = new THREE.WebGLRenderer();
        renderer.setClearColor(0x000000, 1.0);
        renderer.setSize(window.innerWidth, window.innerHeight);

        var size = 800;
        var arrowSize = 150;
        var divisions = 20;
        var origin = new THREE.Vector3( 0, 0, 0 );
        var x = new THREE.Vector3( 1, 0, 0 );
        var y = new THREE.Vector3( 0, 1, 0 );
        var z = new THREE.Vector3( 0, 0, 1 );
        var color2 = new THREE.Color( 0x333333 );  /// 0x333333
        var colorR = new THREE.Color( 0xAA0000 );
        var colorG = new THREE.Color( 0x00AA00 );
        var colorB = new THREE.Color( 0x0000AA );

        //Crear la Grilla
        var gridHelperXZ = new THREE.GridHelper( size, divisions, color2, color2);

        //Flechas
        var arrowX = new THREE.ArrowHelper( x, origin, arrowSize, colorR );
        var arrowY = new THREE.ArrowHelper( y, origin, arrowSize, colorG );
        var arrowZ = new THREE.ArrowHelper( z, origin, arrowSize, colorB );
			
        //Cámara
        camera.position.x = 000;
        camera.position.y = 100;
        camera.position.z = 400;
        camera.lookAt(scene.position);

        function cuadrado(plano, lado, centro) {
          let [x, y, z] = centro;
          med = lado/2;
          switch(plano) {
            case 'XY': return [[x-med, y-med, z], [x-med, y+med, z], [x+med, y+med, z], [x+med, y-med, z], [x-med, y-med, z]];  break;
            case 'XZ': return [[x-med, y, z-med], [x-med, y, z+med], [x+med, y, z+med], [x+med, y, z-med], [x-med, y, z-med]];  break;
            case 'YZ': return [[x, y-med, z-med], [x, y-med, z+med], [x, y+med, z+med], [x, y+med, z-med], [x, y-med, z-med]];  break;
          }
        }
        
        function cubo(posini, lado, material) {
          Geometria = new THREE.Geometry();
          var vertices = cuadrado('XZ', lado, [posini[0], posini[1]+lado/2, posini[2]]);
          vertices = vertices.concat(cuadrado('XZ', lado, [posini[0], posini[1]-lado/2, posini[2]]));
          vertices = vertices.concat(cuadrado('YZ', lado, [posini[0]+lado/2, posini[1], posini[2]]));
          vertices = vertices.concat(cuadrado('YZ', lado, [posini[0]-lado/2, posini[1], posini[2]]));
          var largoVertice = vertices.length;
          for (i = 0; i < largoVertice; i++){
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            Geometria.vertices.push(vector);
          }
          return new THREE.Line(Geometria, material);
        }

        function traslacion(obj, vt) {
          var matrizT = new THREE.Matrix4();
          matrizT.set(1, 0, 0, vt[0],
            0, 1, 0, vt[1],
            0, 0, 1, vt[2],
            0, 0, 0, 1);
          obj.applyMatrix(matrizT);         
        }

        function escalado(obj, vs) {
          var matrizT = new THREE.Matrix4();
          matrizT.set(vs[0], 0, 0, 0,
            0, vs[1], 0, 0,
            0, 0, vs[2], 0,
            0, 0, 0, 1);
          obj.applyMatrix(matrizT);         
        }

        function rotacionX(obj, rt) {
          var matrizT = new THREE.Matrix4();
          let rad = rt * Math.PI / 180;
          [cs, sn] = [Math.cos(rad), Math.sin(rad)];
          matrizT.set(1, 0, 0, 0,
            0, cs, -sn, 0,
            0, sn, cs, 0,
            0, 0, 0, 1);
          obj.applyMatrix(matrizT);         
        }

        // Array para almacenar los Cubos
        var cube = [];

        // Lado de c/u de los cubos
        var lado = 40;

        // Angulo de rotación
        var angRota = 45;

        // Posición inicial cubo (centro)
        [px, py, pz] = [lado/2, lado/2, 0];

        // Colores
        var color = [0xFF0000, 0x00FF00, 0x0000FF, 0xFFFFFF];
        
        for (let i = 0; i < 4; i++) {
          material = new THREE.ParticleBasicMaterial({color: color[i]});
          cube[i] = cubo([px, py, pz], lado, material);
        }

        for (let i = 1; i < 4; i++) {
          traslacion(cube[i], [2*lado, 0, 0]);
        }

        for (let i = 2; i < 4; i++) {
          traslacion(cube[i], [-px-2*lado, -py, -pz]);
          escalado(cube[i], [1.5, 1.5, 1.5]);
          traslacion(cube[i], [px+2*lado, py, pz]);
        }

        traslacion(cube[3], [0, -py, -pz]);
        rotacionX(cube[3], angRota);
        traslacion(cube[3], [0, py, pz]);

        // En el documento HTML
        document.body.appendChild(renderer.domElement);

        // Agregar elementos al escenario
        scene.add(gridHelperXZ);
	      scene.add(arrowX);	
		    scene.add(arrowY);	
		    scene.add(arrowZ);
        for (let i = 0; i < 4; i++)
          scene.add(cube[i]);
        renderer.render(scene, camera);
      }

      init();  // otra forma: window.onload = init;
    </script>
  </body>
</html>